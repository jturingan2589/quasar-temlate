import { precacheAndRoute } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies'
import { ExpirationPlugin } from 'workbox-expiration'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import type { WorkboxPlugin } from 'workbox-core'

declare const self: ServiceWorkerGlobalScope & typeof globalThis

// Fix for TypeScript strict checking
const expirationPlugin = (maxEntries: number, maxAgeSeconds: number): WorkboxPlugin => {
  return {
    ...new ExpirationPlugin({
      maxEntries,
      maxAgeSeconds
    }) as WorkboxPlugin
  }
}

const cacheableResponsePlugin = (statuses: number[]): WorkboxPlugin => {
  return {
    ...new CacheableResponsePlugin({
      statuses
    }) as WorkboxPlugin
  }
}

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST)

// Cache images with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      expirationPlugin(50, 30 * 24 * 60 * 60) // 30 Days
    ]
  })
)

// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'assets-cache',
    plugins: [
      expirationPlugin(60, 7 * 24 * 60 * 60) // 7 Days
    ]
  })
)

// Cache API requests with Network First strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      cacheableResponsePlugin([0, 200]),
      expirationPlugin(100, 24 * 60 * 60) // 24 Hours
    ]
  })
)

// Handle authentication routes with Network First
registerRoute(
  ({ url }) => url.pathname.includes('auth') || url.pathname.includes('token'),
  new NetworkFirst({
    cacheName: 'auth-cache',
    plugins: [
      cacheableResponsePlugin([0, 200])
    ]
  })
)

// Cache font requests
registerRoute(
  ({ request }) => request.destination === 'font',
  new CacheFirst({
    cacheName: 'fonts-cache',
    plugins: [
      expirationPlugin(30, 365 * 24 * 60 * 60) // 1 Year
    ]
  })
)